{
	"info": {
		"_postman_id": "beafdeb8-c007-44ff-9d29-a23cd25e1d3d",
		"name": "Ask The World API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AuthenticateUser",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userAuthenticatePath}}",
							"host": [
								"{{API_URL}}{{userAuthenticatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userAuthenticatePath}}",
							"host": [
								"{{API_URL}}{{userAuthenticatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad login and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Karmello",
									"type": "text"
								},
								{
									"key": "password",
									"value": "cocacola100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userAuthenticatePath}}",
							"host": [
								"{{API_URL}}{{userAuthenticatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Good token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"    const body = pm.response.json()\r",
									"    pm.expect(body.email).to.eql('username@email.com')\r",
									"\t\tpm.expect(body.username).to.eql('Karmello')\r",
									"\t\tpm.expect(body.password).to.be.undefined\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{API_URL}}{{userAuthenticatePath}}",
							"host": [
								"{{API_URL}}{{userAuthenticatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Good login and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with proper body\", () => {\r",
									"    const body = pm.response.json()\r",
									"    pm.expect(body.country).to.eql(\"PL\")\r",
									"\t\tpm.expect(body.password).to.be.undefined\r",
									"});\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Karmello",
									"type": "text"
								},
								{
									"key": "password",
									"value": "cocacola100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userAuthenticatePath}}",
							"host": [
								"{{API_URL}}{{userAuthenticatePath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RegisterUser",
			"item": [
				{
					"name": "No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"    const body = pm.response.json()\r",
									"\t\tpm.expect(body.email.kind).to.eql('required')\r",
									"\t\tpm.expect(body.username.kind).to.eql('required')\r",
									"\t\tpm.expect(body.password.kind).to.eql('required')\r",
									"\t\tpm.expect(body.dateOfBirth.kind).to.eql('required')\r",
									"\t\tpm.expect(body.country.kind).to.eql('required')\r",
									"\t\tpm.expect(body.sex.kind).to.eql('required')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicates in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with proper errors\", function () {\r",
									"    const body = pm.response.json()\r",
									"\t\tpm.expect(body.email.kind).to.eql('unique')\r",
									"\t\tpm.expect(body.username.kind).to.eql('unique')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "username@email.com",
									"type": "text"
								},
								{
									"key": "username",
									"value": "Karmello",
									"type": "text"
								},
								{
									"key": "password",
									"value": "cocacola100",
									"type": "text"
								},
								{
									"key": "country",
									"value": "PL",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1984-09-24",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "M",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with proper body\", function () {\r",
									"    const body = pm.response.json()\r",
									"    pm.expect(body.username).to.eql(\"Karmello\")\r",
									"});\r",
									"\r",
									"pm.environment.set('authToken', pm.response.headers.get('atw-x-auth-token'))\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "username@email.com",
									"type": "text"
								},
								{
									"key": "username",
									"value": "Karmello",
									"type": "text"
								},
								{
									"key": "password",
									"value": "cocacola100",
									"type": "text"
								},
								{
									"key": "country",
									"value": "PL",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "M",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1984-09-24",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReadUser",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id=123412341234123412341234",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "123412341234123412341234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.count.questions).to.eql(0)\r",
									"\tpm.expect(body.user.email).to.eql('username@email.com')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id={{userId}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateUser",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPath}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id=123412341234123412341234",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "123412341234123412341234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.username.kind).to.eql('required')\r",
									"\tpm.expect(body.dateOfBirth.kind).to.eql('required')\r",
									"\tpm.expect(body.country.kind).to.eql('required')\r",
									"\tpm.expect(body.sex.kind).to.eql('required')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id={{userId}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.username.kind).to.eql('unique')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									"Utils.deleteSecondUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"Utils.registerSecondUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TheSecondUser",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1984-09-24",
									"type": "text"
								},
								{
									"key": "country",
									"value": "PL",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "M",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id={{userId}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.username).to.eql('UpdatedUsername')\r",
									"\tpm.expect(body.country).to.eql('GB')\r",
									"\tpm.expect(body.sex).to.eql('F')\r",
									"\tpm.expect(body.dateOfBirth).to.eql('1980-05-01')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "UpdatedUsername",
									"type": "text"
								},
								{
									"key": "dateOfBirth",
									"value": "1980-05-01",
									"type": "text"
								},
								{
									"key": "country",
									"value": "GB",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "F",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPath}}?_id={{userId}}",
							"host": [
								"{{API_URL}}{{userPath}}"
							],
							"query": [
								{
									"key": "_id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UpdatePassword",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "currentPassword",
									"value": "incorrect_password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incorrect current password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"\tconst body = pm.response.json()\r",
									"  pm.expect(body.password.kind).to.eql('required')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "currentPassword",
									"value": "cocacola100",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.email).to.eql('username@email.com')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "currentPassword",
									"value": "cocacola100",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "pepsicola200",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPasswordPath}}",
							"host": [
								"{{API_URL}}{{userPasswordPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MakePayment",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userPaymentPath}}",
							"host": [
								"{{API_URL}}{{userPaymentPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPaymentPath}}",
							"host": [
								"{{API_URL}}{{userPaymentPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPaymentPath}}",
							"host": [
								"{{API_URL}}{{userPaymentPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userPaymentPath}}",
							"host": [
								"{{API_URL}}{{userPaymentPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad orderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with COULD_NOT_CONFIRM_PAYMENT', () => {\r",
									"  pm.response.to.have.body('\"COULD_NOT_CONFIRM_PAYMENT\"')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "orderID",
									"value": "98765",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}{{userPaymentPath}}",
							"host": [
								"{{API_URL}}{{userPaymentPath}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ActivateUser",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userActivatePath}}",
							"host": [
								"{{API_URL}}{{userActivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivatePath}}",
							"host": [
								"{{API_URL}}{{userActivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not email confirmation token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 401', () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivatePath}}",
							"host": [
								"{{API_URL}}{{userActivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Already activated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 403', () => {\r",
									"    pm.response.to.have.status(403)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with EMAIL_ALREADY_CONFIRMED', () => {\r",
									"  pm.response.to.have.body('\"EMAIL_ALREADY_CONFIRMED\"')\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{emailConfirmationToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivatePath}}",
							"host": [
								"{{API_URL}}{{userActivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 302', () => {\r",
									"    pm.response.to.have.status(302)\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{emailConfirmationToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivatePath}}",
							"host": [
								"{{API_URL}}{{userActivatePath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeactivateUser",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userDeactivatePath}}",
							"host": [
								"{{API_URL}}{{userDeactivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userDeactivatePath}}",
							"host": [
								"{{API_URL}}{{userDeactivatePath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 301', () => {\r",
									"  pm.response.to.have.status(301)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userDeactivatePath}}",
							"host": [
								"{{API_URL}}{{userDeactivatePath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetActivationLink",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userActivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userActivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userActivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userActivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userActivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userActivationLinkPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetDeactivationLink",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{userDeactivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userDeactivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userDeactivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userDeactivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 404', () => {\r",
									"  pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with NO_SUCH_USER_ERROR', () => {\r",
									"  pm.response.to.have.body('\"NO_SUCH_USER_ERROR\"')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.deleteUser(pm)\r",
									"}, 1000)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userDeactivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userDeactivationLinkPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{userDeactivationLinkPath}}",
							"host": [
								"{{API_URL}}{{userDeactivationLinkPath}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CreateQuestion",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment not done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NOT_FULL_ACCOUNT\", () => {\r",
									"  pm.response.to.have.body('\"NOT_FULL_ACCOUNT\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No question body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body).to.eql({\r",
									"\t\terrors: {\r",
									"\t\t\ttext: 'required',\r",
									"\t\t\tanswers: 'checkAnswers'\r",
									"\t\t}\r",
									"\t})\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single answer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body).to.eql({\r",
									"\t\terrors: {\r",
									"\t\t\tanswers: 'checkAnswers'\r",
									"\t\t}\r",
									"\t})\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\"],\r\n\t\"options\": { \"multipleChoice\": false, \"maxSelectable\": 1 }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong maxSelectable option",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body).to.eql({\r",
									"\t\terrors: {\r",
									"\t\t\t'options.maxSelectable': 'checkMaxSelectableAnswers'\r",
									"\t\t}\r",
									"\t})\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\", \"answer2\"],\r\n\t\"options\": { \"multipleChoice\": true, \"maxSelectable\": 1 }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong maxSelectable option",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body).to.eql({\r",
									"\t\terrors: {\r",
									"\t\t\t'options.maxSelectable': 'checkMaxSelectableAnswers'\r",
									"\t\t}\r",
									"\t})\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\", \"answer2\"],\r\n\t\"options\": { \"multipleChoice\": false, \"maxSelectable\": 2 }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong maxSelectable option",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 400', () => {\r",
									"  pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper errors', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body).to.eql({\r",
									"\t\terrors: {\r",
									"\t\t\t'options.maxSelectable': 'checkMaxSelectableAnswers'\r",
									"\t\t}\r",
									"\t})\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\", \"answer2\"],\r\n\t\"options\": { \"multipleChoice\": true, \"maxSelectable\": 3 }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No options",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 201', () => {\r",
									"  pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.text).to.eql('this is my new test question which has proper length')\r",
									"\tpm.expect(body.options).to.eql({\r",
									"\t\tmultipleChoice: false,\r",
									"\t\tmaxSelectable: 1\r",
									"\t})\r",
									"\tpm.expect(body.answers).to.eql([\"answer1\", \"answer2\"])\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\", \"answer2\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fully correct scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.authenticateFullUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should responde with 201', () => {\r",
									"  pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test('Should responde with proper body', () => {\r",
									"  const body = pm.response.json()\r",
									"\tpm.expect(body.text).to.eql('this is my new test question which has proper length')\r",
									"\tpm.expect(body.options).to.eql({\r",
									"\t\tmultipleChoice: true,\r",
									"\t\tmaxSelectable: 3\r",
									"\t})\r",
									"\tpm.expect(body.answers).to.eql([\"answer1\", \"answer2\", \"answer3\"])\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"text\": \"this is my new test question which has proper length\",\r\n\t\"answers\": [\"answer1\", \"answer2\", \"answer3\"],\r\n\t\"options\": { \"multipleChoice\": true, \"maxSelectable\": 3 }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReadQuestion",
			"item": []
		},
		{
			"name": "ReadQuestions",
			"item": [
				{
					"name": "Another user's answered questions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with ILLEGAL_ACTION\", () => {\r",
									"  pm.response.to.have.body('\"ILLEGAL_ACTION\"');\r",
									"});\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionsPath}}?filter=ANSWERED&pageNo=1&userId=1234",
							"host": [
								"{{API_URL}}{{questionsPath}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "ANSWERED"
								},
								{
									"key": "pageNo",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Another user's not answered questions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with ILLEGAL_ACTION\", () => {\r",
									"  pm.response.to.have.body('\"ILLEGAL_ACTION\"');\r",
									"});\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionsPath}}?filter=NOT_ANSWERED&pageNo=1&userId=1234",
							"host": [
								"{{API_URL}}{{questionsPath}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "NOT_ANSWERED"
								},
								{
									"key": "pageNo",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Another user's followed questions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with ILLEGAL_ACTION\", () => {\r",
									"  pm.response.to.have.body('\"ILLEGAL_ACTION\"');\r",
									"});\r",
									"\r",
									"Utils.deleteUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionsPath}}?filter=FOLLOWED&pageNo=1&userId=1234",
							"host": [
								"{{API_URL}}{{questionsPath}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "FOLLOWED"
								},
								{
									"key": "pageNo",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteQuestion",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}?atw-x-auth-token=abcd",
							"host": [
								"{{API_URL}}{{questionPath}}"
							],
							"query": [
								{
									"key": "atw-x-auth-token",
									"value": "abcd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment not done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NOT_FULL_ACCOUNT\", () => {\r",
									"  pm.response.to.have.body('\"NOT_FULL_ACCOUNT\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{questionPath}}",
							"host": [
								"{{API_URL}}{{questionPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateAnswer",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UpdateAnswer",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{answerPath}}",
							"host": [
								"{{API_URL}}{{answerPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateFollow",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment not done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NOT_FULL_ACCOUNT\", () => {\r",
									"  pm.response.to.have.body('\"NOT_FULL_ACCOUNT\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteFollow",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment not done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NOT_FULL_ACCOUNT\", () => {\r",
									"  pm.response.to.have.body('\"NOT_FULL_ACCOUNT\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{followPath}}",
							"host": [
								"{{API_URL}}{{followPath}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateReport",
			"item": [
				{
					"name": "No credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NO_CREDENTIALS_PROVIDED\", () => {\r",
									"  pm.response.to.have.body('\"NO_CREDENTIALS_PROVIDED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{reportPath}}",
							"host": [
								"{{API_URL}}{{reportPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should responde with 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with AUTHENTICATION_FAILED\", () => {\r",
									"  pm.response.to.have.body('\"AUTHENTICATION_FAILED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "atw-x-auth-token",
								"value": "abcd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{API_URL}}{{reportPath}}",
							"host": [
								"{{API_URL}}{{reportPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email not confirmed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with EMAIL_NOT_CONFIRMED\", () => {\r",
									"  pm.response.to.have.body('\"EMAIL_NOT_CONFIRMED\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{reportPath}}?atw-x-auth-token={{authToken}}",
							"host": [
								"{{API_URL}}{{reportPath}}"
							],
							"query": [
								{
									"key": "atw-x-auth-token",
									"value": "{{authToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment not done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"Utils.registerUser(pm)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.getActivationLink(pm)\r",
									"}, 1000)\r",
									"\r",
									"setTimeout(() => {\r",
									"\tUtils.activateUser(pm)\r",
									"}, 3000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"Utils.deleteUser(pm)\r",
									"\r",
									"pm.test(\"Should responde with 403\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Should responde with NOT_FULL_ACCOUNT\", () => {\r",
									"  pm.response.to.have.body('\"NOT_FULL_ACCOUNT\"');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}{{reportPath}}?atw-x-auth-token={{authToken}}",
							"host": [
								"{{API_URL}}{{reportPath}}"
							],
							"query": [
								{
									"key": "atw-x-auth-token",
									"value": "{{authToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReadStats",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Utils = {",
					"\tregisterUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get('API_URL') + pm.variables.get('userPath'), ",
					"      method: 'POST',",
					"      header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"      },",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"            { key: 'email', value: 'username@email.com' },",
					"            { key: 'username', value: 'Karmello' },",
					"\t\t\t\t\t\t{ key: 'password', value: 'cocacola100' },",
					"\t\t\t\t\t\t{ key: 'country', value: 'PL' },",
					"\t\t\t\t\t\t{ key: 'sex', value: 'M' },",
					"\t\t\t\t\t\t{ key: 'dateOfBirth', value: '1984-09-24' },",
					"        ]",
					"      }",
					"\t\t}, (err, res) => {",
					"\t\t\tpm.environment.set('authToken', res.headers.get('atw-x-auth-token'))",
					"\t\t\tpm.environment.set('userId', res.json()._id)",
					"\t\t})",
					"\t},",
					"\tregisterSecondUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get('API_URL') + pm.variables.get('userPath'), ",
					"      method: 'POST',",
					"      header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"      },",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"            { key: 'email', value: 'username2@email.com' },",
					"            { key: 'username', value: 'TheSecondUser' },",
					"\t\t\t\t\t\t{ key: 'password', value: 'cocacola200' },",
					"\t\t\t\t\t\t{ key: 'country', value: 'PL' },",
					"\t\t\t\t\t\t{ key: 'sex', value: 'F' },",
					"\t\t\t\t\t\t{ key: 'dateOfBirth', value: '2000-01-01' },",
					"        ]",
					"      }",
					"\t\t}, (err, res) => {",
					"\t\t\tpm.environment.set('authToken2', res.headers.get('atw-x-auth-token'))",
					"\t\t\tpm.environment.set('userId2', res.json()._id)",
					"\t\t})",
					"\t},",
					"\tdeleteUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get(\"API_URL\") + pm.variables.get('userDeactivatePath'), ",
					"      method: 'GET',",
					"      header: {",
					"        'atw-x-auth-token': pm.environment.get('authToken'),",
					"      },",
					"\t\t})",
					"\t},",
					"\tdeleteSecondUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get(\"API_URL\") + pm.variables.get('userDeactivatePath'), ",
					"      method: 'GET',",
					"      header: {",
					"        'atw-x-auth-token': pm.environment.get('authToken2'),",
					"      },",
					"\t\t})",
					"\t},",
					"\tgetActivationLink: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get(\"API_URL\") + pm.variables.get('userActivationLinkPath'),",
					"      method: 'GET',",
					"      header: {",
					"        'atw-x-auth-token': pm.environment.get('authToken'),",
					"      },",
					"\t\t}, (err, res) => {",
					"\t\t\tpm.environment.set('emailConfirmationToken', res.json())",
					"\t\t})",
					"\t},",
					"\tactivateUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get(\"API_URL\") + pm.variables.get('userActivatePath'), ",
					"      method: 'GET',",
					"      header: {",
					"        'atw-x-auth-token': pm.environment.get('emailConfirmationToken'),",
					"      },",
					"\t\t})",
					"\t},",
					"\tauthenticateFullUser: (pm) => {",
					"\t\tpm.sendRequest({",
					"      url: pm.environment.get(\"API_URL\") + pm.variables.get('userAuthenticatePath'),",
					"      method: 'POST',",
					"\t\t\theader: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"      },",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"            { key: 'username', value: 'Mj23' },",
					"            { key: 'password', value: 'cocacola100' },",
					"        ]",
					"      }",
					"\t\t}, (err, res) => {",
					"\t\t\tpm.environment.set('authToken', res.headers.get('atw-x-auth-token'))",
					"\t\t\tpm.environment.set('userId', res.json()._id)",
					"\t\t})",
					"\t},",
					"\tresetLocalVars: (pm) => {",
					"\t\tpm.environment.set('authToken', '')",
					"\t\tpm.environment.set('userId', '')",
					"\t\tpm.environment.set('authToken2', '')",
					"\t\tpm.environment.set('userId2', '')",
					"\t\tpm.environment.set('emailConfirmationToken', '')",
					"\t}",
					"}",
					"",
					"Utils.resetLocalVars(pm)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userPath",
			"value": "/user"
		},
		{
			"key": "userActivationLinkPath",
			"value": "/user/activation-link"
		},
		{
			"key": "userDeactivationLinkPath",
			"value": "/user/deactivation-link"
		},
		{
			"key": "userActivatePath",
			"value": "/user/activate"
		},
		{
			"key": "userDeactivatePath",
			"value": "/user/deactivate"
		},
		{
			"key": "userAuthenticatePath",
			"value": "/user/authenticate"
		},
		{
			"key": "userPasswordPath",
			"value": "/user/password"
		},
		{
			"key": "userPaymentPath",
			"value": "/user/payment"
		},
		{
			"key": "questionPath",
			"value": "/question"
		},
		{
			"key": "questionsPath",
			"value": "/questions"
		},
		{
			"key": "answerPath",
			"value": "/answer"
		},
		{
			"key": "followPath",
			"value": "/follow"
		},
		{
			"key": "reportPath",
			"value": "/report"
		},
		{
			"key": "infoPath",
			"value": "/info"
		},
		{
			"key": "statsPath",
			"value": "/stats"
		},
		{
			"key": "logsPath",
			"value": "/logs"
		}
	]
}